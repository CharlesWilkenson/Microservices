package com.employeeservice.rest;

import java.util.Random;

import javax.servlet.http.HttpSession;
import javax.websocket.server.PathParam;

import org.apache.commons.io.IOUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.oauth2.client.OAuth2RestTemplate;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.HttpClientErrorException;
import org.springframework.web.client.RestClientException;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.multipart.MultipartFile;

import com.employeeservice.entities.Adress;
import com.employeeservice.entities.Employee;
import com.employeeservice.entities.Person;
import com.employeeservice.entities.Salary;
import com.employeeservice.services.Services;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.security.Principal;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Optional;

@RestController
public class EmployeeRest {
	@Autowired
	private Services dao;
	@Autowired
	private OAuth2RestTemplate oAuth2RestTemplate ;
	
	private byte[] photo;
	public byte[] getPhoto() {
		return photo;
	}

    @RequestMapping("/user")
   // @PreAuthorize("hasAnyRole( 'USER')")
    public Principal user(Principal user) {
      return user;
    }

	public void setPhoto(byte[] photo) {
		this.photo = photo;
	}


	
	


	@PostMapping(value = "/saveEmployee")
	public ResponseEntity<Object>saveEmploye(
			@RequestParam(name = "lastname")String lastname,
			@RequestParam(name = "firstname")String firstname,
			@RequestParam(name = "sex")String sex,
			@RequestParam(name = "email")String email,
			@RequestParam(name = "phone")String phone,
			@RequestParam(name = "maritalStatus")String maritalStatus,
			@RequestParam(name = "identification")String identification,
			@RequestParam(name = "dateBirth")String dateBirth,
			@RequestParam(name = "placeBirth")String placeBirth,
			@RequestParam(name = "fonction")String fonction,
			@RequestParam(name = "department")String department,
			@RequestParam(name = "type")String type,
			@RequestParam(name = "street")String street,
			@RequestParam(name = "city")String city,
			@RequestParam(name = "citizenship")String citizenship,
			@RequestParam(name = "number",defaultValue = "0")int number,
			@RequestParam(name=  "image") MultipartFile image ) {
		  System.out.println("Method save is called ");

			MultiValueMap<String, Object> mapUser = new LinkedMultiValueMap<String, Object>();

			// Data attached to the request.
			mapUser.add("email", email);
			mapUser.add("role", type.toUpperCase());
	
		  String code=code();
		/*
		 * System.out.println("code 1:"+code); System.out.println("code 2:"+code);
		 */
		  Adress a=new Adress("AD"+code,city, street, number);
		
		 Employee em=new Employee(code, lastname, firstname, sex, dateBirth, 
				 placeBirth, citizenship, identification, maritalStatus,
				 phone, email, fonction, department, type,a);
		 Salary salary=new Salary(code, 0.0, 0.0, 0.0);
			
			// URL with URI-variable
			 String URL_ADD_USER = "http://user-service/createUser";
		 try {
		
			 if(!image.isEmpty()) {
				 em.setPhoto(image.getBytes());
				 dao.saveEmploye(em,a ,salary);
				 
				  ResponseEntity<String> resultUser =oAuth2RestTemplate.postForEntity(URL_ADD_USER, mapUser, String.class);
					if (resultUser.getStatusCode() == HttpStatus.CREATED ) {
							System.out.println(
									"Request Successful: " + resultUser.getStatusCode());
						} else {
							System.out.println("Request Failed: " +  resultUser.getStatusCode());
						}
			   return new ResponseEntity<Object>(HttpStatus.CREATED);
			 }else {
				
					System.out.println("Choose a file");
			 }
			 		 
			 
		}catch (Exception e) {
			 System.out.println("Error "+e.getMessage());
		}
					

	      return ResponseEntity.ok(HttpStatus.CREATED);
	}
	
	                                      
	
	   @GetMapping(value = "/searchEmployee" )
	   public ResponseEntity<Object> getEmploye(@RequestParam(name = "codeSearch")String code)throws Exception {
		   ServiceResponse result=new ServiceResponse();
		   System.out.println("Code :"+code);
   
		   Employee e2=dao.findEmploye(code);
		 
		   if(e2==null) {
			   return  new ResponseEntity<Object>("Employe not found", HttpStatus.NOT_FOUND);
			   
		   }
		   Adress a=new Adress(e2.getAdress().getAdress_id(), e2.getAdress().getCity(),
					  e2.getAdress().getStreet(), e2.getAdress().getNumber());					  
					  Salary salary=new Salary(e2.getSalary().getSalary_id(),e2.getSalary().getGross_salary(), e2.getSalary().getNet_salary(), e2.getSalary().getTaux());
					  Employee e=e2;
					  e.setAdress(a);   
					  e.setSalary(salary);
					  photo=e.getPhoto(); 
					  
		/*
		 * System.out.println("Lastname:"+ e2.getLastname());
		 * System.out.println("Lastname:"+ e2.getFirstname());;
		 * System.out.println("Adresse:"+ e2.getAdress().getAdress_id()+" "+
		 * e2.getAdress().getCity()+" "+ e2.getAdress().getStreet()+""+
		 * e2.getAdress().getNumber());
		 */
	      return  new ResponseEntity<Object>(e, HttpStatus.OK);
	   }

	   
	   
	   
	   @GetMapping(value = "/findByEmail" )
	   public ResponseEntity<Object> findByEmail(
			   Principal principal)throws Exception {
			String userInfo=principal.getName();
		   System.out.println("Code :"+userInfo);
   
		   Optional<Employee> e=dao.findByEmail(userInfo);
		 
		   if(e.isEmpty()) {
			   return  new ResponseEntity<Object>("Employe not found", HttpStatus.NOT_FOUND);
			   
		   }
		   Employee em=e.get();
		   Employee emp=new Employee();
			 emp.setCode(em.getCode());
			 emp.setLastname(em.getLastname());
		     emp.setFirstname(em.getFirstname());
			 emp.setEmail(em.getEmail());
			 emp.setPhoto(em.getPhoto());
					  photo=em.getPhoto(); 
					  

	      return  new ResponseEntity<Object>(emp, HttpStatus.OK);
	   }
	   
	   

	   @GetMapping(value = "/edit/{code}")
	   public ResponseEntity<Object> editEmploye(@PathVariable("code") String code)throws Exception {
		   ServiceResponse result=new ServiceResponse();
		   System.out.println("Code :"+code);
   
		   Employee e2=dao.findEmploye(code);
		 
		   if(e2==null) {
			   return  new ResponseEntity<Object>("Employe not found", HttpStatus.NOT_FOUND);
			   
		   }
		   Adress a=new Adress(e2.getAdress().getAdress_id(), e2.getAdress().getCity(),
					  e2.getAdress().getStreet(), e2.getAdress().getNumber());					  
					//  Salary salary=new Salary(e2.getSalary().getSalary_id(),e2.getSalary().getGross_salary(), e2.getSalary().getNet_salary(), e2.getSalary().getTaux());
					  Employee e=e2;
					  e.setAdress(a);   
					//  e.setSalary(salary);
					  photo=e.getPhoto(); 
					  
					  System.out.println("Lastname:"+ e2.getLastname());
					  System.out.println("Lastname:"+ e2.getFirstname());;
					  System.out.println("Adresse:"+ e2.getAdress().getAdress_id()+" "+ e2.getAdress().getCity()+" "+
								e2.getAdress().getStreet()+""+ e2.getAdress().getNumber());
	      return  new ResponseEntity<Object>(e, HttpStatus.OK);
	   }
	   
	   
	   @GetMapping(value="/employees")
	   public ResponseEntity<?> getAllEmployes()  throws Exception{
		   ServiceResponse result=new ServiceResponse();
		 
			List<Employee> list1=new ArrayList<Employee>();
		    List<Employee> list=dao.findAllEmployes();
		for(Employee e2:list) {
			
			  Adress a=new Adress(e2.getAdress().getCity(),
			  e2.getAdress().getStreet(), e2.getAdress().getNumber()); 
			 // Salary salary=new Salary(e2.getSalary().getGross_salary(), e2.getSalary().getNet_salary(), e2.getSalary().getTaux());
			  
			  Employee e=e2;
			  e.setAdress(a);
			 // e.setSalary(salary);
			 
			list1.add(e);
	
		}
		
		 
		   return new ResponseEntity<>(list1, HttpStatus.OK);
			

	   }
	   

	   
		@GetMapping(value = "/getImage")
		public byte[] getImage() throws IOException {
			ByteArrayInputStream b = null;
			byte[] io = null;
			try {
            System.out.println("Method getImage is called");
		
				b = new ByteArrayInputStream(photo);

				io = IOUtils.toByteArray(b);
			} catch (Exception e) {		
			}

			return io;
		}
	   
	   
	   
		
		
		@PostMapping(value = "/updateEmployee")
		        public ResponseEntity<Object>updateEmploye(
		        @RequestParam(name = "code")String code,
				@RequestParam(name = "lastname")String lastname,
				@RequestParam(name = "firstname")String firstname,
				@RequestParam(name = "sex")String sex,
				@RequestParam(name = "email")String email,
				@RequestParam(name = "phone")String phone,
				@RequestParam(name = "maritalStatus")String maritalStatus,
				@RequestParam(name = "identification")String identification,
				@RequestParam(name = "dateBirth")String dateBirth,
				@RequestParam(name = "placeBirth")String placeBirth,
				@RequestParam(name = "fonction")String fonction,
				@RequestParam(name = "department")String department,
				@RequestParam(name = "type")String type,				
				@RequestParam(name = "street")String street,
				@RequestParam(name = "city")String city,			
				@RequestParam(name = "citizenship")String citizenship,
				@RequestParam(name = "number",defaultValue = "0")int number,				
				@RequestParam(name=  "image") MultipartFile image) {
			    System.out.println("Method update is called ");

			 
			 try {
			
				 Employee  emp=dao.findEmploye(code);
				 
				String adress_id=emp.getAdress().getAdress_id();
				String codeEmpl=emp.getCode();
				Date date=emp.getDate();
				byte[]photo=emp.getPhoto();

				  Adress adresse=new Adress(adress_id,city, street, number);
				
				  Employee em=new Employee(code, lastname, firstname, sex, dateBirth, 
							 placeBirth, citizenship, identification, maritalStatus,
							 phone, email, fonction, department, type,adresse);
		                     em.setDate(emp.getDate());
			   		
				 if(!image.isEmpty()) {
					em.setPhoto(image.getBytes());			
					 System.out.println("There is a file:"+codeEmpl); 
					 
				 }else {
                    em.setPhoto(photo);             
									
					 System.out.println("No file:"+codeEmpl); 
					
				 }
				 		 
					dao.updateEmployes(em, adresse);
			}catch (Exception e) {
				 System.out.println("Error "+e.getMessage());
			}
						

			 return ResponseEntity.ok(HttpStatus.CREATED); 
		}
		
		
		private String code() {
			Random rd = new Random();
			String code = String.format("%s%s%s", rd.nextInt(999), rd.nextInt(999), rd.nextInt(99));
			return code;
		}


	   
	   
	/*
	 * @GetMapping(value = "/employeeInfbbbbbbbbbo") public ResponseEntity<Object>
	 * employeeHomePage(Principal principal) { String userInfo=principal.getName();
	 * Employee emp=new Employee(); List<Employee>empl=dao.findByEmail(userInfo);
	 * for(Employee em:empl) { emp.setCode(em.getCode());
	 * emp.setLastname(em.getLastname()); emp.setFirstname(em.getFirstname());
	 * emp.setEmail(em.getEmail()); emp.setPhoto(em.getPhoto()); } return new
	 * ResponseEntity<Object>(emp, HttpStatus.OK); }
	 * 
	 */		
		

		
}
