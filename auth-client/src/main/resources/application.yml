# Make the application available at http://localhost:8080
# These are default settings, but we add them for clarity.
spring:
  cloud:
    config:
         uri: http://localhost:8888
       

  application:
    name: proxy-service

server:
  servlet:
    context-path: /

# Configure the Authorization Server and User Info Resource Server details
security:
  oauth2:
    client:
      accessTokenUri: http://localhost:7070/authorization-server/oauth/token
      userAuthorizationUri: http://localhost:7070/authorization-server/oauth/authorize
      clientId: authserver
      clientSecret: passwordforauthserver
    resource:
      userInfoUri: http://localhost:9000/user



# Proxies the calls to http://localhost:8080/api/* to our REST service at http://localhost:8081/*
# and automatically includes our OAuth2 token in the request headers
zuul:
  sensitiveHeaders: Cookie,Set-Cookie
  routes:
    resource:

      #employee
    employee:
      path: /employee-service/**
     # sensitiveHeaders:
      serviceId: employee-service 
        
        #client
    client:
      path: /client-service/**
      serviceId: client-service     
      
    #operation
    operation:
      path: /operation-service/**
      serviceId: operation-service 
      
         #operation
    user:
      path: /user-service/**
      serviceId: user-service 
      
       #auth
    auth-server:
      path: http://localhost:7070/createUser
      serviceId: authorization-server   
      
   #operation
    client-space:
      path: /client-space-service/**
      serviceId: client-space-service           
      
    
# Make sure the OAuth2 token is only relayed when using the internal API,
# do not pass any authentication to the external API
proxy:
  auth:
    routes:
      api: oauth2